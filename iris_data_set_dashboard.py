# -*- coding: utf-8 -*-
"""Iris_Data_Set_DashBoard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S7tJGKeGii1efT7zUI_4mhiGmb1K0fVC

**Introdution and  Concepts**

>
  **Objectives**

Interactive dashboards using Python, Streamlit, and Plotly.
Interactive dashboards are used in various domains like finance, marketing, and healthcare.

**Key Concepts**

**Dashboard Definition:** A user interface that presents information in a visually appealing and easy-to-understand way.

Data Flow: Data Ingestion -> Processing -> Visualization -> Interaction
Interactive vs. Static Dashboards: Interactive dashboards allow users to explore data in real-time.

**Real-World Applications**

*Healthcare:* Monitoring patient outcomes

*Finance:* Tracking investment performance

*Retail:* Analyzing sales data

**Challenges & Best Practices**

Data Cleaning:
 Handling missing values, correcting data types.

Usability: Ensuring the dashboard is easy to use and understand.

Performance: Optimizing code for fast loading times.

**Install necessary packages: pip install streamlit**
"""

!pip install streamlit

"""# To Build a simple "Hello World" interactive dashboard.

"""

# Commented out IPython magic to ensure Python compatibility.
# # magic function to the write the cell content in a python file.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# 
# # set a title in the streamlit app
# st.title("Hello World Dashboard in Streamlit")
# 
# # Simple data
# df = pd.DataFrame({
#     'x': [1, 2, 3, 4, 5],
#     'y': [10, 20, 30, 40, 50]
# })
# # plot a line chart in streamlit
# st.line_chart(df)

!curl https://loca.lt/mytunnelpassword

"""**To see the dashboard click first 'y' then click on the url and it will take you to streamlit app there you use your tunnelpassword**"""

!streamlit run app.py & npx localtunnel --port 8501

import pandas as pd
import plotly.express as px

import streamlit as st # for Dashboard

"""## Tools, Libraries, and Getting Started

### Popular Libraries in Python

*   **Streamlit:** Quick to set up, minimal boilerplate, great for demos.
*   **Plotly Dash:** More control over layout and interactivity (more complex).
*   **Bokeh/Panel:** Good for advanced customization.

### Automating Workflows

*   Scheduling data refreshes (e.g., using cron jobs).
*   Using CI/CD for deployment and version control (e.g., GitHub Actions).

To add data validation and interpretation elements.


1.  Loaded (iris.csv)
2.  Validated data (checked for missing values, data types).
3.  Displayed summary statistics and a simple chart with a tooltip.
"""

# download Iris dataset
from seaborn import load_dataset
df = load_dataset('iris')
df.to_csv('iris.csv', index=False)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(6,4))
sns.countplot(x=df['species'], palette='viridis')

plt.xlabel('Class Labels')
plt.ylabel('Count')
plt.title('Class Distribution')
plt.show()

numerical_cols = ["sepal_length", "sepal_width", "petal_length", "petal_width"]

plt.figure(figsize=(10, 6))
sns.violinplot(data=df[numerical_cols], palette="muted")
plt.title("Violin Plot of Numerical Features")
plt.ylabel("Value")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.swarmplot(data=df[numerical_cols], size=3)
plt.title("Swarm Plot of Numerical Features")
plt.ylabel("Value")
plt.xticks(rotation=45)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# 
# st.title("Data Validation & Visualization")
# 
# # Upload or load local CSV
# uploaded_file = st.file_uploader("Upload a CSV", type=["csv"])
# 
# if uploaded_file is not None:
#     df = pd.read_csv(uploaded_file)
# 
#     # Validate data
#     st.write("Data Overview:", df.head())
#     st.write("Missing values:", df.isnull().sum())
# 
#     # Simple chart with tooltip
#     fig = px.scatter(df, x="sepal_length", y="sepal_width", color="species",
#                      hover_data=['petal_length', 'petal_width'])
#     st.plotly_chart(fig)
# else:
#     st.write("Please upload Iris Dataset CSV file to begin.")

!streamlit run app.py & npx localtunnel --port 8501

"""## Advanced Techniques and Common Pitfalls

### Most Common Mistakes

*   Overly complex visuals (too many charts, colors).
*   Neglecting user feedback.
*   Poor performance with large datasets.

### Advanced Features

*   Interactive filters, drill-downs, and cross-highlighting.
*   Responsive design for different screen sizes.
*   Real-time streaming (e.g., using WebSockets).

### To add a filter/drill-down feature.

1.  Added a dropdown or multiselect to filter the data.
2.  Updated the chart based on the selected filter.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# 
# st.title("Interactive Dashboard with Filters")
# 
# # Load data (replace with your data loading)
# try:
#     df = pd.read_csv("iris.csv") # Check for local file
# except FileNotFoundError:
#     st.write("Iris CSV File not found, upload one below")
#     uploaded_file = st.file_uploader("Upload a CSV", type=["csv"])
#     if uploaded_file is not None:
#       df = pd.read_csv(uploaded_file)
#     else:
#       st.stop()
# 
# 
# species_list = df['species'].unique()
# 
# selected_species = st.multiselect("Select Species:", species_list, default=species_list)
# 
# filtered_df = df[df['species'].isin(selected_species)]
# 
# fig = px.scatter(filtered_df, x="sepal_length", y="sepal_width", color="species",
#                  hover_data=['petal_length', 'petal_width'])
# 
# st.plotly_chart(fig)

!streamlit run app.py & npx localtunnel --port 8501

"""## Use Cases, Business Impact, and Case Studies

### Business Use & Insights

*   Dashboards can reveal trends, anomalies, and improvement areas.
*   Facilitates data-driven decisions at all organizational levels.

### Improving Decision-Making

*   Real-time alerts and threshold-based notifications.
*   Collaboration features (sharing, embedding).

### Real-World Case Studies

*   Retail: Monitoring sales performance across different regions.
*   Healthcare: Tracking patient outcomes and resource utilization.

### To incorporate a predictive model output.

1. Created a Predictive Model using scikit-learn RandomForestClassifier
2. Used the model to predict a value based on user input.
3. Displayed the prediction in the dashboard.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import LabelEncoder
# 
# st.title("Interactive Dashboard with Prediction (Random Forest)")
# 
# # Load data
# try:
#     df = pd.read_csv("iris.csv")  # Check for local file
# except FileNotFoundError:
#     st.write("Iris CSV File not found, upload one below")
#     uploaded_file = st.file_uploader("Upload a CSV", type=["csv"])
#     if uploaded_file is not None:
#         df = pd.read_csv(uploaded_file)
#     else:
#         st.stop()
# 
# # Encode the target variable
# label_encoder = LabelEncoder()
# df['species'] = label_encoder.fit_transform(df['species'])
# 
# # Train the model (using Random Forest)
# X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
# y = df['species']
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 
# model = RandomForestClassifier(n_estimators=100, random_state=42)
# model.fit(X_train, y_train)
# 
# # User input
# st.sidebar.header("Input Features")
# sepal_length = st.sidebar.slider("Sepal Length", float(X['sepal_length'].min()), float(X['sepal_length'].max()), float(X['sepal_length'].mean()))
# sepal_width = st.sidebar.slider("Sepal Width", float(X['sepal_width'].min()), float(X['sepal_width'].max()), float(X['sepal_width'].mean()))
# petal_length = st.sidebar.slider("Petal Length", float(X['petal_length'].min()), float(X['petal_length'].max()), float(X['petal_length'].mean()))
# petal_width = st.sidebar.slider("Petal Width", float(X['petal_width'].min()), float(X['petal_width'].max()), float(X['petal_width'].mean()))
# 
# # Make prediction
# input_data = pd.DataFrame([[sepal_length, sepal_width, petal_length, petal_width]],
#                           columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])
# prediction = model.predict(input_data)[0]
# predicted_species = label_encoder.inverse_transform([prediction])[0]
# 
# # Display prediction
# st.subheader("Prediction")
# st.write(f"Predicted Species: {predicted_species}")
# 
# # Plot the prediction
# fig = px.scatter(df, x="sepal_length", y="sepal_width", color=df['species'].map({0: 'setosa', 1: 'versicolor', 2:'virginica'}))
# fig.add_scatter(x=[sepal_length], y=[sepal_width], mode='markers', marker=dict(size=[20], color='red'), name='Input')
# st.plotly_chart(fig)

!streamlit run app.py & npx localtunnel --port 8501